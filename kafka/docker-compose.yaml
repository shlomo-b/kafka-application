services:
  zookeeper:
    image: zookeeper:3.7.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    #  - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # ,PLAINTEXT_HOST://10.0.11.10:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT # ,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka-network
  kafka-ui:  
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: my-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER_URL: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - kafka-network  

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8000:8000"
    depends_on:
      - kafka
    networks:
      - kafka-network

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8001:8001"
    depends_on:
      - kafka
    networks:
      - kafka-network

networks:
  kafka-network:
    ipam:
      config:
        - subnet: 192.23.0.0/16
          gateway: 192.23.0.254



# services:
#   kafka:
#     image: bitnami/kafka:3.6.1
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_CFG_PROCESS_ROLES: controller,broker
#       KAFKA_CFG_NODE_ID: 1
#       KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
#       KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
#       KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
#       KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
#       KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#       KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
#       KAFKA_CFG_NUM_PARTITIONS: 1
#       KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
#       ALLOW_PLAINTEXT_LISTENER: "yes"
#     volumes:
#       - kafka-data:/bitnami/kafka
#     networks:
#       - kafka-network

#   kafka-ui:
#     image: provectuslabs/kafka-ui:latest
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: kraft-cluster
#       KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
#     depends_on:
#       - kafka
#     networks:
#       - kafka-network

#   producer:
#     build:
#       context: ./producer
#       dockerfile: Dockerfile
#     environment:
#       KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#     ports:
#       - "8000:8000"
#     depends_on:
#       - kafka
#     networks:
#       - kafka-network

#   consumer:
#     build:
#       context: ./consumer
#       dockerfile: Dockerfile
#     environment:
#       KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#     ports:
#       - "8001:8001"
#     depends_on:
#       - kafka
#     networks:
#       - kafka-network

# volumes:
#   kafka-data:

# networks:
#   kafka-network:
#     ipam:
#       config:
#         - subnet: 192.23.0.0/16
#           gateway: 192.23.0.254
